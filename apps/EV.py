import streamlit as st

import numpy as np
import cvxpy as cp
import pandas as pd
import math, random
import scipy as sc
import time
from matplotlib import pyplot as plt
import plotly.express as px
import plotly.graph_objects as go

def app():

    st.title('–†–∞—Å—á—ë—Ç –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—É—Ç–æ—á–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–æ—Å—ë–ª–∫–∞ —Å —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è–º–∏ üèòÔ∏èüöó')

    with st.expander('–û–ø–∏—Å–∞–Ω–∏–µ:'):
        st.markdown("""
        **–ó–∞–¥–∞—á–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏** ‚Äî —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É—Ç–æ—á–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∑–∞—Ä—è–¥–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π, —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π:
        - –º–∞–∫—Å–∏–º–∏–∑–∏—Ä—É–µ—Ç –º–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è,
        - —Å—Ç—Ä–µ–º–∏—Ç—Å—è —Å–≥–ª–∞–¥–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞—Ä—è–¥–∫–∏ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è,
        - —É—á–∏—Ç—ã–≤–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π ‚Äî –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∂–µ–ª–∞–µ–º—ã–π –∫–æ–Ω–µ—á–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏.
        """)
        st.markdown("---")
        st.write("""
        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–¥–∞—ë—Ç —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        ###### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏, –∫–í–ê;
        - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è, –∫–í—Ç ‚Äî –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π;
        - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π;
        - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤/–∫–≤–∞—Ä—Ç–∏—Ä/–¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤;

        ###### –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:
        - —É–∫–∞–∑–∞—Ç–µ–ª—å —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º 0 –∏–ª–∏ 1, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –¥–æ–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≥—Ä—É–∑–∏—Ç –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É.
           - 0 ‚Äî —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Å—É—Ç–æ—á–Ω–æ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –≤—Å–µ—Ö –¥–æ–º–æ–≤ –≤ –ø–æ—Å—ë–ª–∫–µ;
           - 1 ‚Äî —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Å—É—Ç–æ—á–Ω–æ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –æ–¥–Ω–æ–≥–æ –¥–æ–º–∞. –ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –∂–µ–ª–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–º–æ–≤ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–µ–¥–µ–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏, –≤ %;
        - —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —Ç–æ, —É—á–∏—Ç—ã–≤–∞—Ç—å –ª–∏ —Ç—Ä–∏ –±—ã—Å—Ç—Ä—ã–µ –∑–∞—Ä—è–¥–∫–∏ –ø–æ 50 –∫–í—Ç:
           - –∑–∞—Ä—è–¥–∫–∞ 1 - —Å `12:00` –¥–æ `14:00`; —Å `16:00` –¥–æ `17:00`; —Å `19:00` –¥–æ `21:00`
           - –∑–∞—Ä—è–¥–∫–∞ 2 - —Å `13:00` –¥–æ `15:00`; —Å `15:30` –¥–æ `17:00`; —Å `18:00` –¥–æ `20:00`; —Å `10:00` –¥–æ `11:00`
           - –∑–∞—Ä—è–¥–∫–∞ 3 - —Å `12:00` –¥–æ `13:00`; —Å `13:00` –¥–æ `15:00`; —Å `16:00` –¥–æ `18:00`; —Å `21:00` –¥–æ `23:00`; —Å `11:00` –¥–æ `12:00`
              - 1 ‚Äî —É—á–∏—Ç—ã–≤–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∑–∞—Ä—è–¥–∫–∏;
              - 0 ‚Äî –Ω–µ —É—á–∏—Ç—ã–≤–∞—Ç—å;

        –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ —Ñ–∞–π–ª—ã:
        - –ø—Ä–µ–¥–µ–ª –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ ‚Äî `570 –∫–í–ê`;
        - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è ‚Äî `3.6 –∫–í—Ç`;
        - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π ‚Äî `10`;
        - –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–µ–¥–µ–ª–∞ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –ø–æ–¥—Å—Ç–∞–Ω—Ü–∏–∏ –≤ –∑–∞–¥–∞—á–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ ‚Äî `0 %`;
        - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±—ã—Å—Ç—Ä—ã–µ –∑–∞—Ä—è–¥–∫–∏;
        - —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —Å—É—Ç–æ—á–Ω–æ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é `190` –¥–æ–º–æ–≤;
        - —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ `171` —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ;

        –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
        - —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –¥–æ–º–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ —Å 12:00 (–≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ) –ø–æ 12:00 (–Ω–µ –≤–∫–ª—é—á–∞—è) —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è;
        - —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ –æ–± —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è—Ö;

        """)
        st.markdown("---")
        st.write("""
        ###### –û–ø–∏—Å–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö:
        - –î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –¥–æ–º–æ–≤/–∫–≤–∞—Ä—Ç–∏—Ä/–¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤:
           - –§–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ `*.csv`;
           - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ‚Äî [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤ x 48] (—Ç.–∫. 48 –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ 30 –º–∏–Ω);
           - –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–µ–∑ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞;
           - –í —Å—Ç—Ä–æ–∫–µ - –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –¥–æ–º–∞ (–∫–í—Ç*—á/2) –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è –≤ `12:00` –∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –≤ `11:30` —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è;

        –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∏–∂–µ.

        - –î–∞–Ω–Ω—ã–µ –æ–± —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è—Ö:
        - –§–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ `*.csv`;
        - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ‚Äî [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π x 8];
        - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è:
           - –ø–æ—Ä—è–¥–∫–æ–≤—ã–π –Ω–æ–º–µ—Ä —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è;
           - –ø–∞—Å–ø–æ—Ä—Ç–Ω–∞—è —ë–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏ (–∫–í—Ç*—á);
           - —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —ë–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏ (%);
           - –æ—Å—Ç–∞—Ç–æ–∫ –∑–∞—Ä—è–¥–∞ (%);
           - –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ —á–∞—Å–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, `17:00` –∏–ª–∏ `22:00`. –°—á–∏—Ç–∞–µ–º, —á—Ç–æ EV –º–æ–≥—É—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è —Å `12:00` –¥–æ `23:00` –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å);
           - –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞ (—Å —Ç–æ—á–Ω–æ—Å—Ç—å—é –¥–æ —á–∞—Å–∞ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, 9 –∏–ª–∏ 22. –°—á–∏—Ç–∞–µ–º, —á—Ç–æ EV –≤—ã–µ–∑–∂–∞—é—Ç –Ω–µ –ø–æ–∑–∂–µ `10:00` –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è);
           - –∂–µ–ª–∞–µ–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ –∑–∞—Ä—è–¥–∫–∏ (%, 80-100);
           - –ø—Ä–∏–µ–º–ª–µ–º—ã–π –Ω–∏–∂–Ω–∏–π –ø–æ—Ä–æ–≥ –∑–∞—Ä—è–¥–∫–∏ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è! –ú–æ–∂–Ω–æ –Ω–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –≤ Excel –ø—É—Å—Ç–æ–π —Å—Ç–æ–ª–±–µ—Ü —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º);

        –ü—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –Ω–∏–∂–µ.
        """)
        st.markdown("---")
        st.write("""
        ##### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:
        –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Äî —Ç—Ä–∏ –≥—Ä–∞—Ñ–∏–∫–∞:
        - –æ–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–∑ —É—á—ë—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π (–∫–í–ê) –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫;
        - –æ–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π (–∫–í–ê) –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏;
        - –æ–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π (–∫–í–ê) –≤ —Ç–µ—á–µ–Ω–∏–µ —Å—É—Ç–æ–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π.


        –û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–∏, —á—Ç–æ –≤—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –∑–∞—Ä—è–∂–∞—Ç—å—Å—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ —Å—Ä–∞–∑—É –ø–æ –ø—Ä–∏–±—ã—Ç–∏–∏ –∏ –≤—Ä–µ–º—è –∏—Ö –∑–∞—Ä—è–¥–∫–∏ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ (—Ç. –µ. –≤—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ –º–æ–≥—É—Ç –∑–∞—Ä—è–∂–∞—Ç—å—Å—è –¥–æ 11:30 –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è).

        –ó–∞–¥–∞—á–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Ä–µ—à–µ–Ω–∏–µ (–≤ –≤–∏–¥–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞—Ä—è–¥–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π) –Ω–µ –ø—Ä–∏ –≤—Å–µ—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤. –í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, –∑–∞–¥–∞—á–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è, –µ—Å–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è –∏ –≤–æ–∑–º–æ–∂–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏ —Ç–∞–∫–æ–≤—ã, —á—Ç–æ –≤—Å–µ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏ –Ω–µ —É—Å–ø–µ–≤–∞—é—Ç –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –¥–æ —Ç—Ä–µ–±—É–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è –∑–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è. –í–æ–∑–º–æ–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ ‚Äî —É–≤–µ–ª–∏—á–∏—Ç—å –º–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è –∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏, –Ω–µ —Ä–∞–∑—Ä—è–∂–∞—Ç—å –±–∞—Ç–∞—Ä–µ—é –Ω–∏–∂–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è.

        –¢–∞–∫–∂–µ –≤–∞–∂–Ω–æ –ø–æ–Ω–∏–º–∞—Ç—å, —á—Ç–æ –ø—Ä–∏ –∑–∞–¥–∞–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –æ–Ω–∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è –∏–∑ –≤—Å–µ—Ö –∏–º–µ—é—â–∏—Ö—Å—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã. –ö–∞–∂–¥—ã–π —Ç–∞–∫–æ–π –Ω–∞–±–æ—Ä —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π –±—É–¥–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –ø–æ –∑–∞—Ä—è–¥–∫–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –¥–ª—è –∑–∞—Ä—è–¥–∫–∏. –ü–æ—ç—Ç–æ–º—É –∑–∞–¥–∞—á–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Äî —Å –æ–¥–Ω–∏–º –Ω–∞–±–æ—Ä–æ–º —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π ‚Äî –∏ –Ω–µ –∏–º–µ—Ç—å —Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Äî —Å –¥—Ä—É–≥–∏–º –Ω–∞–±–æ—Ä–æ–º —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π.
        """)
        st.markdown("---")
        col1,col2,col3 = st.columns([2,2,6])
        with open(r"C:\Users\testingcenter\Downloads\data_EV_example.csv", "rb") as file:
            col1.write("–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π:")
            col2.download_button(label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", key='1temp', data=file, file_name='data_EV_example.csv', mime="csv",)

        with open(r"C:\Users\testingcenter\Downloads\data_houses_example.csv", "rb") as file:
            col1.write("–°–∫–∞—á–∞—Ç—å —à–∞–±–ª–æ–Ω –¥–ª—è –¥–æ–º–æ–≤:")
            col2.download_button(label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", key='2temp',data=file, file_name='data_houses_example.csv', mime="csv",)

    # def main_EV_scheduling(P_max, S_upper_limit,  S_upper_upper_limit, use_lighting, use_quick_charges, house_koeff, EV_koeff, key, data_houses, data_EVs, n_EVs):
    def main_EV_scheduling(P_max, S_upper_limit, S_percent, use_quick_charges, key_houses, data_houses, data_1_house, data_EVs, n_EVs, n_houses):

        alpha = 1 # –∫–æ—ç—Ñ—Ñ, —Ç—Ä–µ–±—É—é—â–∏–π, —á—Ç–æ–±—ã –∑–∞—Ä—è–∂–∞–ª–∏—Å—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ–π P
        beta = 0.5 # –∫–æ—ç—Ñ—Ñ, —Ç—Ä–µ–±—É—é—â–∏–π –≥–ª–∞–¥–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∑–∞—Ä—è–¥–∫–∏

        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–º–∞–º
        def make_houses_dataset(house_koeff):
            if data_houses is not None:
                house_data = pd.read_csv(data_houses, encoding="windows-1251", header = None)
            rows = house_data.iloc[:, 0]
            house_data.index = rows
            house_data = house_data.T

            n_houses = house_data.shape[1]
            n_int = house_data.shape[0] # –∫–æ–ª-–≤–æ 30-–º–∏–Ω—É—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤

            houses_E = house_koeff*house_data.sum(axis = 1) # –æ–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –¥–æ–º–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏

            return house_data, n_int, houses_E

        def make_1_house_dataset(house_koeff):
            house_df = pd.read_csv(data_1_house, header = None)
            house_data_arr = [round(num, 3) for num in list(house_df.iloc[0,:])]
            n_int_ = len(house_data_arr)
            #max_h = max(house_data_arr)

            house_list = [house_data_arr]
            for i in range(n_houses-1):
                arr = [0]*n_int_

                for j in range(n_int_):
                    arr[j] = house_data_arr[j] + np.random.normal(0, 0.15*house_data_arr[j], size = None)

                arr = [round(num, 3) for num in arr]
                house_list.append(arr)

            house_data = pd.DataFrame(house_list)
            house_data = house_data.transpose()

            houses_E = house_koeff*house_data.sum(axis = 1) # –æ–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –¥–æ–º–æ–≤ —Å —É—á–µ—Ç–æ–º –∫–æ—ç—Ñ—Ñ. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏
            n_int = house_data.shape[0] # –∫–æ–ª-–≤–æ 30-–º–∏–Ω—É—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤

            return house_data, n_int, houses_E

        def koeff_simultaneity(n_houses):
            keys = [1, 0.51, 0.38, 0.32, 0.29, 0.26, 0.24, 0.2, 0.18, 0.16, 0.14, 0.13]
            values = [list(range(1, 6)),
                      [6, 7, 8],
                      [9, 10, 11],
                      [12, 13, 14],
                      [15, 16, 17],
                      list(range(18, 24)),
                      list(range(24, 40)),
                      list(range(40, 60)),
                      list(range(60, 100)),
                      list(range(100, 200)),
                      list(range(200, 400)),
                      list(range(400, 600))
                     ]
            mydict = dict(zip(keys, values))

            if n_houses < 1:
                print('–û—à–∏–±–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–º–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0!')
                return
            elif n_houses >= 600:
                return 0.11
            else:
                a = [k for k, v in mydict.items() if n_houses in v]
                return a[0]

        def n_EVs_(n_EVs):
            if data_EVs is not None:
                EVs_df = pd.read_csv(data_EVs, encoding="windows-1251")
            EVs_df = EVs_df.iloc[list(np.random.choice(range(EVs_df.shape[0]), n_EVs, replace=False)), :]
            return EVs_df

        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ EVs - –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª-–≤–æ —ç–Ω–µ—Ä–≥–∏–∏
        def EVs_data(EVs_df):
            keys = list(range(12, 24)) + list(range(12))
            values = list(range(0, 48, 2))
            dictionary = dict(zip(keys, values))


            arrival_times = np.array([dictionary[key] for key in EVs_df['–í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, —á']])

            departure_times = [48 - dictionary[key] for key in EVs_df['–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è –≤—ã–µ–∑–¥–∞, —á']]

            required_energies = list(EVs_df['–ü–∞—Å–ø–æ—Ä—Ç–Ω–∞—è –µ–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏, –∫–í—Ç*—á']* EVs_df['–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –µ–º–∫–æ—Å—Ç—å –±–∞—Ç–∞—Ä–µ–∏, %']/100*\
            (EVs_df['–ñ–µ–ª–∞–µ–º—ã–π –≤–µ—Ä—Ö–Ω–∏–π –ø–æ—Ä–æ–≥ –∑–∞—Ä—è–¥–∫–∏, %'] - EVs_df['–û—Å—Ç–∞—Ç–æ–∫ –∑–∞—Ä—è–¥–∞, %'])/100)


            arrival_times, departure_times, required_energies  = \
            zip(*sorted(zip(arrival_times, departure_times, required_energies)))

            return arrival_times, departure_times, required_energies

        # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∑–∞—Ä—è–¥–∫–∏ EVs –≤ —Å–∞–º–æ–º –ø—Ä–æ—Å—Ç–æ–º —Å–ª—É—á–∞–µ - –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        # EV –ø—Ä–∏–µ–∑–∂–∞–µ—Ç - —Å—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞—Ä—è–∂–∞—Ç—å—Å—è –Ω–∞ P_max
        def schedule_simple(n_int,n_EVs):
            A0 = np.zeros((n_int,n_EVs)) # n_int - –∫–æ–ª-–≤–æ 30-–º–∏–Ω—É—Ç–Ω—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ —Å 12:00 –¥–æ 11:30 —Å–ª–µ–¥. –¥–Ω—è

            for j in range(n_EVs):
                start = arrival_times[j]
                duration = math.ceil(required_energies[j]/P_max*2) # –∫–æ–ª-–≤–æ 30-–º–∏–Ω—É—Ç–æ–∫, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å EV –Ω–∞ P_max

                A0[start:start + duration, j] = [1]*duration

            return A0

        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        def optimization():
            S_limit = S_upper_limit * (1 + S_percent/100)
            diags = [[1]*n_int, [-1]*(n_int-1)]
            D = sc.sparse.diags(diags, [0, 1]).toarray()[:-1, :] # –º–∞—Ç—Ä–∏—Ü–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ-–≥–ª–∞–¥–∫–æ—Å—Ç–∏ –ø—Ä–æ—Ñ–∏–ª—è –∑–∞—Ä—è–¥–∫–∏

            X = cp.Variable((n_int, n_EVs)) # variable

            constr = [required_energies == cp.sum(X, axis=0) * P_max / 2,
              cp.sum(X, axis=1) * P_max / 0.95 <= list([S_limit]*n_int - houses_E*2/0.95 - np.array([x/0.95 for x in sum_quick])),
              X <= np.ones((n_int, n_EVs)),
              np.zeros((n_int, n_EVs)) <= X]

            for j in range(n_EVs):
                dep_time = departure_times[j]
                arr_time = arrival_times[j]
                if dep_time > 0:
                    constr += [X[-dep_time:, j] == 0]
                if arr_time > 0:
                    constr += [X[:arr_time, j] == 0]

            sum_1_norms = sum([cp.norm1(D @ X[:, j]) for j in range(n_EVs)])

            cost = 0

            for j in range(n_EVs):
                summ = 0
                for ll in range(n_int):
                    summ += (X[ll, j] - 1)**2
                cost += summ * alpha     # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - —á—Ç–æ–±—ã –∑–∞—Ä—è–∂–∞–ª–∏—Å—å –Ω–∞ –±–û–ª—å—à–∏—Ö –º–æ—â–Ω–æ—Å—Ç—è—Ö

            cost += beta * sum_1_norms   # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ-–≥–ª–∞–¥–∫–æ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—è

            prob = cp.Problem(cp.Minimize(cost),constr)

            prob.solve()

            if prob.status in ["infeasible", "unbounded"]:
                print('–ó–∞–¥–∞—á–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –∏–º–µ–µ—Ç —Ä–µ—à–µ–Ω–∏—è!!')
                return

            X_profile = X.value

            return X_profile


        def plot_houses_consumption(houses_E):
            st.write('##### –°—É–º–º–∞—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç/—ç –±–µ–∑ —É—á—ë—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π')
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=list(range(n_int)), y=houses_E*2/0.95, name="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–∑ —É—á—ë—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π", line_shape='hv', fill='tozeroy',legendrank=2))
            fig.add_trace(go.Scatter(x=list(range(0, n_int)), y=[S_upper_limit]*n_int, name="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏",legendrank=1))
            fig.update_traces(hoverinfo='x+y', mode='lines')
            fig.update_layout(
                # title='–°—É–º–º–∞—Ä–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç/—ç –±–µ–∑ —É—á—ë—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π',
                xaxis_title='–í—Ä–µ–º—è, —á', yaxis_title='S, kVA',
                legend=dict(y=0.5, font_size=16),
                    xaxis = dict(
                    tickmode = 'array',
                    tickvals = np.arange(0, 49, step=2).tolist(),
                    ticktext = list(range(12, 24)) + list(range(0, 13))),
                    )
            st.plotly_chart(fig, use_container_width=True)


        def plot_schedule_simple(A0):
            st.write('##### –û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç/—ç –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, kVA')

            fig = go.Figure()
            fig.add_trace(go.Scatter(x=list(range(n_int)), y=houses_E*2/0.95, name="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–∑ —É—á—ë—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π", line_shape='hv', fill='tozeroy',legendrank=2))
            fig.add_trace(go.Scatter(x=list(range(0, n_int)), y=[S_upper_limit]*n_int, name="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏",legendrank=1))
            fig.add_trace(go.Scatter(x=list(range(0, n_int)), y=P_max/0.95*np.sum(A0, axis = 1) + houses_E*2/0.95 + np.array([x/0.95 for x in sum_quick]), name="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π",line_shape='hv', fill='tozeroy',legendrank=3))
            fig.add_trace(go.Scatter(x=list(range(0, n_int)), y=P_max/0.95*np.sum(A0, axis = 1) + np.array([x/0.95 for x in sum_quick]), name="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª. —ç–Ω–µ—Ä–≥–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è–º–∏",line_shape='hv', fill='tozeroy',legendrank=4))

            fig.update_traces(hoverinfo='x+y', mode='lines')
            fig.update_layout(
                # title='–û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, kVA',
                xaxis_title='–í—Ä–µ–º—è, —á', yaxis_title='S, kVA',
                legend=dict(y=0.5, font_size=16),
                    xaxis = dict(
                    tickmode = 'array',
                    tickvals = np.arange(0, 49, step=2).tolist(),
                    ticktext = list(range(12, 24)) + list(range(0, 13))),
                    )
            st.plotly_chart(fig, use_container_width=True)

        def plot_total_profile_optimized(X_profile):
            st.write('##### –û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç/—ç —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π, kVA')
            fig = go.Figure()
            fig.add_trace(go.Scatter(x=list(range(n_int)), y=houses_E*2/0.95, name="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–µ–∑ —É—á—ë—Ç–∞ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π", line_shape='hv', fill='tozeroy',legendrank=2))
            fig.add_trace(go.Scatter(x=list(range(0, n_int)), y=[S_upper_limit]*n_int, name="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏",legendrank=1))
            fig.add_trace(go.Scatter(x=list(range(0, n_int)), y=np.sum(X_profile, axis = 1)* P_max / 0.95 + houses_E*2/0.95 + np.array([x/0.95 for x in sum_quick]), name="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å —É—á—ë—Ç–æ–º —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π",line_shape='hv', fill='tozeroy',legendrank=3))
            fig.add_trace(go.Scatter(x=list(range(0, n_int)), y=np.sum(X_profile, axis = 1)* P_max / 0.95 + np.array([x/0.95 for x in sum_quick]), name="–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —ç–ª. —ç–Ω–µ—Ä–≥–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è–º–∏",line_shape='hv', fill='tozeroy',legendrank=4))

            fig.update_traces(hoverinfo='x+y', mode='lines')
            fig.update_layout(
                # title='–û–±—â–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π, kVA',
                xaxis_title='–í—Ä–µ–º—è, —á', yaxis_title='S, kVA',
                legend=dict(y=0.5, font_size=16),
                    xaxis = dict(
                    tickmode = 'array',
                    tickvals = np.arange(0, 49, step=2).tolist(),
                    ticktext = list(range(12, 24)) + list(range(0, 13))),
                    )
            st.plotly_chart(fig, use_container_width=True)

        # –ò –Ω–∞–∫–æ–Ω–µ—Ü - –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å—ë!!
        house_koeff = koeff_simultaneity(n_houses)

        if key_houses == 0:
            house_data, n_int, houses_E = make_houses_dataset(house_koeff)
        elif key_houses == 1:
            house_data, n_int, houses_E = make_1_house_dataset(house_koeff)
        else:
            st.error('–û—à–∏–±–∫–∞: —É–∫–∞–∑–∞—Ç–µ–ª—å –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è 0 –∏–ª–∏ 1!')
            return


        EVs_df = n_EVs_(n_EVs)
        arrival_times, departure_times, required_energies = EVs_data(EVs_df)
        A0 = schedule_simple(n_int,n_EVs)

        st.write("")

        st.subheader('–†–µ–∑—É–ª—å—Ç–∞—Ç')

        st.write('–ü–∏–∫ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —ç–ª. —ç–Ω–µ—Ä–≥–∏–∏ –±–µ–∑ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π: ', round(max(houses_E*2/0.95),2), '–∫–í–ê')

        with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ–º–∞–º:"):
            Names = [i for i in range(house_data.shape[1])]
            house_data.columns = Names
            st.write(house_data)
        with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è–º:"):
            st.write(EVs_df.sort_index())

        if use_quick_charges == 1:
            quick_1 = [50]*4 + [0]*4 + [50]*2 + [0]*4 + [50]*4 + [0]*30
            quick_2 = [0]*2 + [50]*4 + [0]*1 + [50]*3 + [0]*2 + [50]*4 + [0]*28 + [50]*2 + [0]*2
            quick_3 = [50]*6 + [0]*2 + [50]*4 + [0]*6 + [50]*4 + [0]*24 + [50]*2
            sum_quick = [x+ y+ z for (x, y, z) in zip(quick_1, quick_2, quick_3)]
        elif use_quick_charges == 0:
            sum_quick = [0]*n_int
        else:
            st.error('–û—à–∏–±–∫–∞! use_quick_charges = 0 –∏–ª–∏ 1!')
            return

        with st.spinner('–ò–¥—ë—Ç —Ä–∞—Å—Å—á–µ—Ç...'):
            X_profile = optimization()

        plot_houses_consumption(houses_E)
        plot_schedule_simple(A0)
        plot_total_profile_optimized(X_profile)


    # plt.show

    st.subheader('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:')
    with st.form("Form1"):

        st.write('##### –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:')
        col1,col2,col3,col4 = st.columns(4)

        with col1:
            S_upper_limit = st.number_input('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏ –ü–°, –∫–í–ê', min_value=0, max_value=None, value=570)
        with col2:
            P_max = st.number_input('–ú–∞–∫—Å. –º–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è, –∫–í—Ç', min_value=0.0, max_value=None, value=3.6) # kW - max –º–æ—â–Ω–æ—Å—Ç—å –∑–∞—Ä—è–¥–∫–∏ EV
        with col3:
            n_EVs = st.number_input('–ö–æ–ª-–≤–æ —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–µ–π, —à—Ç', min_value=0, max_value=None, value=170)
        with col4:
            n_houses = st.number_input('–ö–æ–ª-–≤–æ –¥–æ–º–æ–≤/–∫–≤–∞—Ä—Ç–∏—Ä/–¥–æ–º–æ—Ö–æ–∑—è–π—Å—Ç–≤, —à—Ç', min_value=0, max_value=None, value=190)

        st.markdown("---")

        st.write('##### –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:')
        col1,col2,col3,col4 = st.columns(4)
        with col1:
            S_percent = st.number_input('–ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–µ–¥–µ–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –º–æ—â–Ω–æ—Å—Ç–∏, –≤ %',min_value=0.0, max_value=None, value=0.0, format='%f') # –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É –Ω–∞ –æ–±—â–µ–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ - EVs + –¥–æ–º–∞
        with col3:
            key_houses = st.checkbox('–î–∞–Ω–Ω—ã–µ –ø–æ –æ–¥–Ω–æ–º—É –¥–æ–º—É')
        with col4:
            use_quick_charges = st.checkbox('–ë—ã—Å—Ç—Ä—ã–µ –∑–∞—Ä—è–¥–∫–∏')

        for option in [use_quick_charges,key_houses]:
            if option:
                option = 1
            else:
                option = 0

        st.markdown("---")
        st.write('##### –§–∞–π–ª—ã —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:')

        col1,col2 = st.columns(2)
        with col1:
            data_houses = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é –¥–æ–º–æ–≤ –∑–∞ —Å—É—Ç–∫–∏:', type='csv', key='1', accept_multiple_files=False)
        with col2:
            data_EVs = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ–± —ç–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—è—Ö:', type='csv', key='2', accept_multiple_files=False)

        if st.checkbox('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å demo —Ñ–∞–π–ª—ã'):
            data_houses = "./data/190 houses.csv"
            data_EVs = "./data/data EVs.csv"

        data_1_house = "./data/1 house 24 hours.csv"
        # st.info('EVs –ø—Ä–∏–µ–∑–∂–∞—é—Ç —Ä–∞–Ω–¥–æ–º–Ω–æ —Å 19:00 –¥–æ 23:00, –º–æ–≥—É—Ç –∑–∞—Ä—è–∂–∞—Ç—å—Å—è –¥–æ 07:00')
        st.write("")
        # st.markdown("---")

        submitted = st.form_submit_button("üöÄ–†–∞—Å—á–∏—Ç–∞—Ç—å")

    if submitted:
        main_EV_scheduling(P_max, S_upper_limit, S_percent, use_quick_charges, key_houses, data_houses, data_1_house, data_EVs, n_EVs, n_houses)

