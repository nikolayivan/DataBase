import streamlit as st
import numpy as np
import pandas as pd

import openpyxl
from datetime import datetime

def app():
    st.title('–°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–≥ üìà')
    st.sidebar.write('')
    st.sidebar.info('About: This is a demo version of web application designed to recode and analyse parameters from EPU. All rights belongs to JSC Profotech.')
    FolderPath = r'./data'
    FileName = '/–¢–∞–±–ª–∏—Ü–∞ –î–∞–Ω–Ω—ã—Ö.xlsx'

    @st.experimental_memo
    def LoadDataBase(FolderPath,FileName):
        DataBase_df = pd.read_excel(FolderPath + FileName, header = 0, parse_dates=['–î–∞—Ç–∞'])
        return DataBase_df


    DataBase_df = LoadDataBase(FolderPath,FileName)
    DataBase_df.sort_values('–î–∞—Ç–∞', inplace=True, ignore_index=True)

    st.write('–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É:')
    if st.button('–û–±–Ω–æ–≤–∏—Ç—å'):
        LoadDataBase.clear()
        DataBase_df = LoadDataBase(FolderPath,FileName)
        DataBase_df.sort_values('–î–∞—Ç–∞', inplace=True, ignore_index=True)
        st.session_state['DataBase_df'] = DataBase_df.to_dict()

    st.write("–û–±—â–µ–µ –∫–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π: ", DataBase_df.shape[0] )
    st.write("–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: ", DataBase_df.shape[1] )

    st.write('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã:')
    with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É"):
        st.dataframe(DataBase_df.tail(10))

    con_1 = st.container()
    # ColOption = st.checkbox('–ò—Å–∫–ª—é—á–∏—Ç—å –ø—É—Å—Ç—ã–µ —Å—Ç–æ–ª–±—Ü—ã')

    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª")

    if uploaded_file is not None:

        with st.form("form_1"):

            Date = st.date_input("–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É",datetime.today())
            if not Date:
                st.warning('–£–∫–∞–∂–∏—Ç–µ –î–∞—Ç—É!')

            df0 = pd.read_csv(uploaded_file, sep=';', header=None, delimiter = None, names=['–ü–∞—Ä–∞–º–µ—Ç—Ä','–ó–Ω–∞—á–µ–Ω–∏–µ'], encoding="cp1251", na_filter=True, skip_blank_lines=True)
            df0.drop_duplicates(subset = ['–ü–∞—Ä–∞–º–µ—Ç—Ä'], keep = 'last', inplace=True)

            row_1_s = pd.Series({'–ü–∞—Ä–∞–º–µ—Ç—Ä': '–î–∞—Ç–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ': str(Date)})
            row_1_df = pd.DataFrame([row_1_s])
            df0 = pd.concat([row_1_df, df0], ignore_index=True)

            Columns = df0.iloc[:,0].dropna().tolist()
            Columns = [Col for Col in Columns if Col[0] != "=" if Col[0] != ":" if Col[0] != ""]
            df1 = df0.loc[df0.iloc[:,0].isin(Columns)].reset_index(drop=True)

            for row, name in enumerate(df1['–ü–∞—Ä–∞–º–µ—Ç—Ä']):
                df1.iloc[row,0] = ' '.join(name.split())

            SN = df1.loc[ df1['–ü–∞—Ä–∞–º–µ—Ç—Ä'] == '–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'].reset_index(drop=True)[0]

            # if len(SN) < 2:
            SN = st.text_input("–£–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≠–û–ë", value=SN)
            if len(SN) < 2:
            # if not SN:
                st.warning('–£–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –≠–û–ë!')
            else:
                df1.loc[ df1['–ü–∞—Ä–∞–º–µ—Ç—Ä'] == '–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'] = SN

            with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É"):
                st.write(df1)

            final_df = df1.T
            final_df.columns = final_df.iloc[0]
            final_df = final_df.drop('–ü–∞—Ä–∞–º–µ—Ç—Ä').reset_index(drop=True)

            result = pd.concat([DataBase_df, final_df], ignore_index=True, sort=False)

            df_to_save = result.iloc[-1]
            df_to_save = df_to_save.to_frame().T

                # with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –∑–∞–ø–∏—Å–∏"):
                #     st.write(df_to_save)
            st.write('–ó–∞–ø–∏—Å–∞—Ç—å –≤ –æ–±—â—É—é —Ç–∞–±–ª–∏—Ü—É:')
            submitted_1 = st.form_submit_button('–ó–∞–ø–∏—Å–∞—Ç—å')

            if submitted_1:
                if uploaded_file is not None:
#                     append_df_to_excel(FolderPath + FileName, df_to_save, sheet_name='Sheet1',header=0, index=False)
#                     st.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!')
                    with pd.ExcelWriter(FolderPath + FileName, mode="a", engine="openpyxl", if_sheet_exists="overlay",) as writer:
                        df_to_save.to_excel(writer, sheet_name="Sheet1", startrow=writer.sheets['Sheet1'].max_row, index = False,header= False)
                        st.success('–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã!')
                else:
                    st.warning("–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª...")

        # final_df.to_excel(FolderPath + '\output.xlsx', sheet_name='Sheet1', index = False)


        if st.checkbox('–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö'):
            with st.form("form_2"):
                st.write('–í—ã–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:')
                # if st.checkbox('–í—ã–±—Ä–∞—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:'):
                Rows = st.multiselect('–í—ã–±—Ä–∞—Ç—å —Ä—è–¥—ã', options=df1.iloc[:,0])

                submitted = st.form_submit_button("–í—ã–≤–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ")

                if submitted:
                    selected_df = df1.loc[df1['–ü–∞—Ä–∞–º–µ—Ç—Ä'].isin(Rows)]

            if Rows:
                st.write(selected_df)
