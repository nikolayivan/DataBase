import streamlit as st
import numpy as np
import pandas as pd
import plotly.express as px
from datetime import datetime
import sqlite3

def app():
    st.title('–°–∏—Å—Ç–µ–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ üìà')
    st.sidebar.write('')
#     st.sidebar.info('About: \n This is a demo version of web application designed to recode and analyse parameters from EPU. All rights belongs to JSC Profotech.')
    FolderPath = r'./data'
    FileName = '/DataBase.db'
#     FileName = '/–¢–∞–±–ª–∏—Ü–∞ –î–∞–Ω–Ω—ã—Ö.xlsx'

    @st.experimental_memo
    def LoadDataBase(FolderPath,FileName, ColOption):
        con = sqlite3.connect(FolderPath + FileName)
        cur = con.cursor()
        DataBase_df = pd.read_sql('SELECT * FROM data', con, parse_dates=['–î–∞—Ç–∞'])
        con.close()
        # DataBase_df = pd.read_excel(FolderPath + FileName, header = 0, parse_dates=['–î–∞—Ç–∞'])
        DataBase_df["–î–∞—Ç–∞"] = DataBase_df["–î–∞—Ç–∞"].dt.date

        if ColOption:
            nan_value = float("NaN")
            DataBase_df.replace("", nan_value, inplace=True)
            DataBase_df.dropna(how='all', axis=1, inplace=True)
        return DataBase_df

    
    ColOption = False
    DataBase_df = LoadDataBase(FolderPath,FileName,ColOption)
    DataBase_df.sort_values('–î–∞—Ç–∞', inplace=True, ignore_index=True)
    
    con1 = st.container()
    
    st.write('–û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É:')
    if st.button('–û–±–Ω–æ–≤–∏—Ç—å'):
        LoadDataBase.clear()
        DataBase_df = LoadDataBase(FolderPath,FileName,ColOption)
        DataBase_df.sort_values('–î–∞—Ç–∞', inplace=True, ignore_index=True)
        # st.session_state['DataBase_df'] = DataBase_df.to_dict()

    con1.write(f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ –∑–∞–ø–∏—Å–µ–π: `{DataBase_df.shape[0]}`")
    con1.write(f"–û–±—â–µ–µ –∫–æ–ª-–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: `{DataBase_df.shape[1]}`" )
    
    col1, _ = st.columns([1,5])
    Number = col1.number_input('–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª-–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', value=5)
    # st.write('–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ –æ–±—â–µ–π —Ç–∞–±–ª–∏—Ü—ã:')
    with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞–±–ª–∏—Ü—É"):
        st.dataframe(DataBase_df.tail(Number))

    Plot_df = DataBase_df
    Plot_df.sort_values('–î–∞—Ç–∞', inplace=True)

    with st.form("form_2"):
        st.write('–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–∞—Ä–∞–º–µ—Ç—Ä—É:')
        con_2 = st.container()

        if st.checkbox('–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –≠–û–ë'):
            RowOptionList = list(dict.fromkeys(Plot_df['–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞'].tolist()))
            RowOption = RowOptionList
        else:
            RowOption = list(dict.fromkeys(Plot_df['–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞'].tolist()))
            RowOptionList = None

        con_3 = st.container()

        if st.checkbox('–í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'):
            ColOptionList = Plot_df.columns.tolist()
            ColOptions = ColOptionList
        else:
            ColOptionList = None
            ColOptions = [
            '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –ê): –ö–æ–Ω—Ç—Ä–∞—Å—Ç',
            '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –ê): Umod',
            '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –ê): Max. ADC',
            '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –í): –ö–æ–Ω—Ç—Ä–∞—Å—Ç',
            '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –í): Umod',
            '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –í): Max. ADC',
            '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –°): –ö–æ–Ω—Ç—Ä–∞—Å—Ç',
            '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –°): Umod',
            '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –°): Max. ADC',
            '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –°): Tin',
            '–õ–∞–∑–µ—Ä–Ω—ã–π –∏–∑–ª—É—á–∞—Ç–µ–ª—å: –¢–æ–∫ –õ–∞–∑–µ—Ä–Ω–æ–≥–æ –ò–∑–ª—É—á–∞—Ç–µ–ª—è']

        AddColOptions = [
        '–î–∞—Ç–∞',
        '–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞',
        '–û–ø—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –ê): –ß–∞—Å—Ç. –º–æ–¥—É–ª—è—Ü–∏–∏',
        '–û–ø—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –í): –ß–∞—Å—Ç. –º–æ–¥—É–ª—è—Ü–∏–∏',
        '–û–ø—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –°): –ß–∞—Å—Ç. –º–æ–¥—É–ª—è—Ü–∏–∏',
        ]

        con_4 = st.container()
        Rows = con_2.multiselect('–í—ã–±—Ä–∞—Ç—å –≠–û–ë:', options=RowOption , default = RowOptionList)
        MainColumns = con_3.multiselect('–í—ã–±—Ä–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', options=ColOptions, default = ColOptionList)
        AddColumns = con_4.multiselect('–í—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:', options=AddColOptions[3:])

        Columns = AddColOptions[:3] + MainColumns + AddColumns

        Columns = list(dict.fromkeys(Columns))

        submitted = st.form_submit_button("–í–≤–æ–¥")

        if submitted:
            pass
        else:
            st.stop()

    if not Rows:
        st.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Ä—è–¥—ã!')
        st.stop()

    if not Columns:
        st.warning('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±—Ü—ã!')
        st.stop()

    selected_df = Plot_df.loc[Plot_df['–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞'].isin(Rows), Columns]
    # st.write(selected_df.info())
    # selected_df = Plot_df

    datetimes = pd.to_datetime(selected_df["–î–∞—Ç–∞"])
    selected_df["–î–∞—Ç–∞"] = datetimes
    selected_df.sort_values('–î–∞—Ç–∞', inplace=True)

    # st.line_chart(selected_df)
    st.header('')
    st.header('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö')

    with st.expander("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â—É—é —Ç–∞–±–ª–∏—Ü—É"):
        st.dataframe(selected_df)

    if Rows:
        if MainColumns:
            df = selected_df[selected_df['–û–ø—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –ê): –ß–∞—Å—Ç. –º–æ–¥—É–ª—è—Ü–∏–∏'] < 50 ]
            if not df.empty:
                # st.write(df)
                st.subheader('–ß–∞—Å—Ç–æ—Ç–∞ –º–æ–¥—É–ª—è—Ü–∏–∏ 38 –∫–ì—Ü')
                fig = px.scatter(df, x="–î–∞—Ç–∞", y=MainColumns, hover_name=df['–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞'])
                fig.update_layout(legend_title_text=None,
                        legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1))
                st.plotly_chart(fig, use_container_width=True)

            df = selected_df[selected_df['–û–ø—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –ê): –ß–∞—Å—Ç. –º–æ–¥—É–ª—è—Ü–∏–∏'] > 50 ]
            if not df.empty:
                # st.write(df)
                st.subheader('–ß–∞—Å—Ç–æ—Ç–∞ –º–æ–¥—É–ª—è—Ü–∏–∏ 66 –∫–ì—Ü')
                fig = px.scatter(df, x="–î–∞—Ç–∞", y=MainColumns, hover_name=df['–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞'])
                fig.update_layout(legend_title_text=None,
                        legend=dict(
                        orientation="h",
                        yanchor="bottom",
                        y=1.02,
                        xanchor="right",
                        x=1))
                st.plotly_chart(fig, use_container_width=True)

            # marginal_y="violin",
            # marginal_x="box", trendline="ols", template="simple_white")

            # fig3 = px.scatter(grouped_df, y=Columns[1:])
            # st.plotly_chart(fig3, use_container_width=True)
            #
            # fig3 = px.box(grouped_df, y=Columns[1:], points="all")
            # st.plotly_chart(fig3, use_container_width=True)
            #
            # fig3 = px.violin(grouped_df, y=Columns[1:], points="all")
            # st.plotly_chart(fig3, use_container_width=True)


    # st.stop()

    selected_df_5 = pd.DataFrame()

    for Row in Rows:
        selected_df_6  = pd.DataFrame()
        selected_df_2  = selected_df.loc[selected_df['–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞'].isin([Row]), :]

        # st.write(selected_df_2)
        # st.stop()

        if type(selected_df_2) == type(pd.Series([1,2,3])):
            selected_df_2  = selected_df_2.to_frame().T
            # selected_df_2 = selected_df_2.reset_index()
            # selected_df_2.rename(columns={'index': '–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞'}, inplace=True)
        # else:
        #     selected_df_2 = selected_df_2.reset_index()

        for Ind, Col in enumerate(selected_df_2.columns):
            Series = selected_df_2.loc[:,Col]
            if Col == '–î–∞—Ç–∞':
                selected_df_6[Col] = Series.sub(Series.iloc[0]).dt.days
                # selected_df_6[Col] = selected_df_2.loc[:,Col].sub(selected_df_2.iloc[0,Ind]).dt.days
            elif Col == '–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞':
                selected_df_6[Col] = selected_df_2[Col]
            elif Col == '–û–ø—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –ê): –ß–∞—Å—Ç. –º–æ–¥—É–ª—è—Ü–∏–∏':
                selected_df_6[Col] = selected_df_2[Col]
            else:
                for i in Series.index:
                    if not pd.isna(Series[i]):
                        selected_df_6[Col] = Series.div(Series[i])
                        break
                    # else:
                    #     selected_df_6[Col] = Series.div(Series.iloc[1])

        selected_df_5 = pd.concat([selected_df_5, selected_df_6], ignore_index=False)
        # selected_df_5.sort_values('–î–∞—Ç–∞', inplace=True)


    st.header('')
    st.header('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö')

    with st.expander('–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É'):
        st.write(selected_df_5)

    df = selected_df_5[selected_df_5['–û–ø—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –ê): –ß–∞—Å—Ç. –º–æ–¥—É–ª—è—Ü–∏–∏'] < 50]
    if not df.empty:
        st.subheader('–ß–∞—Å—Ç–æ—Ç–∞ –º–æ–¥—É–ª—è—Ü–∏–∏ 38 –∫–ì—Ü')
        fig2 = px.scatter(df, x='–î–∞—Ç–∞', y=MainColumns, hover_name='–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞')
        fig2.update_layout(legend_title_text=None,
                legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1))
        st.plotly_chart(fig2, use_container_width=True)

    df = selected_df_5[selected_df_5['–û–ø—Ç–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (EOM –§–∞–∑–∞ –ê): –ß–∞—Å—Ç. –º–æ–¥—É–ª—è—Ü–∏–∏'] > 50]
    if not df.empty:
        st.subheader('–ß–∞—Å—Ç–æ—Ç–∞ –º–æ–¥—É–ª—è—Ü–∏–∏ 66 –∫–ì—Ü')
        fig2 = px.scatter(df, x='–î–∞—Ç–∞', y=MainColumns, hover_name='–î–∞–Ω–Ω—ã–µ –≠–û–ë: –ó–∞–≤. –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä–∞')
        fig2.update_layout(legend_title_text=None,
                legend=dict(
                orientation="h",
                yanchor="bottom",
                y=1.02,
                xanchor="right",
                x=1))
        st.plotly_chart(fig2, use_container_width=True)
